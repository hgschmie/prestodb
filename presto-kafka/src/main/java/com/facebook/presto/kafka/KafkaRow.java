package com.facebook.presto.kafka;

import io.airlift.slice.Slice;
import io.airlift.slice.Slices;

import java.util.List;
import java.util.Set;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Base class for all decoder specific row classes. Manages the internal fields (which are not generated by the decoder) and
 * builds a cache for the value providers. Delegates decoder specific fields to the actual implementations.
 */
public final class KafkaRow
{
    private final List<KafkaColumnHandle> columnHandles;
    private final KafkaFieldValueProvider[] fieldValueProviderCache;

    KafkaRow(List<KafkaColumnHandle> columnHandles, Set<KafkaFieldValueProvider> internalFieldValueProviders)
    {
        this.columnHandles = checkNotNull(columnHandles, "columnHandles is null");

        this.fieldValueProviderCache = new KafkaFieldValueProvider[columnHandles.size()];

        // If a value provider for a requested internal column is present, assign the
        // value to the internal cache. It is possible that an internal column is present
        // where no value provider exists (e.g. the '_corrupt' column with the DummyRowDecoder).
        // In that case, the cache is null (and the column is reported as null).
        for (int i = 0; i < columnHandles.size(); i++) {
            for (KafkaFieldValueProvider internalFieldValueProvider : internalFieldValueProviders) {
                if (internalFieldValueProvider.accept(columnHandles.get(i))) {
                    fieldValueProviderCache[i] = internalFieldValueProvider;
                    break; // for(InternalColumnProvider...
                }
            }
        }
    }

    public final boolean getBoolean(int field)
    {
        KafkaColumnHandle columnHandle = columnHandles.get(field);
        return isNull(field) ? false : fieldValueProviderCache[field].getBoolean();
    }

    public final long getLong(int field)
    {
        KafkaColumnHandle columnHandle = columnHandles.get(field);
        return isNull(field) ? 0L : fieldValueProviderCache[field].getLong();
    }

    public final double getDouble(int field)
    {
        KafkaColumnHandle columnHandle = columnHandles.get(field);
        return isNull(field) ? 0.0d : fieldValueProviderCache[field].getDouble();
    }

    public final Slice getSlice(int field)
    {
        KafkaColumnHandle columnHandle = columnHandles.get(field);
        return isNull(field) ? Slices.EMPTY_SLICE : fieldValueProviderCache[field].getSlice();
    }

    public final boolean isNull(int field)
    {
        KafkaColumnHandle columnHandle = columnHandles.get(field);
        return fieldValueProviderCache[field] == null || fieldValueProviderCache[field].isNull();
    }
}
